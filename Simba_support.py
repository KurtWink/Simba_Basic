#! /usr/bin/env python
#
# Support module generated by PAGE version 4.9
# In conjunction with Tcl version 8.6
#    Jul 24, 2017 07:59:36 AM


import sys

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1

def set_Tk_var():
    # Vars for Main Frsmr
    global combobox
    combobox = StringVar()
    global loadBarVar
    loadBarVar = IntVar()

    #Vars for HostedService
    global projectInputVar
    projectInputVar = StringVar()
    global seriesInputVar
    seriesInputVar = StringVar()
    global stdStartVar
    stdStartVar = StringVar()
    global epoStartVar
    epoStartVar = StringVar()
    global stdEndVar
    stdEndVar = StringVar()
    global epoEndVar
    epoEndVar = StringVar()
    global useStdVar
    useStdVar = StringVar()
    global useEpoVar
    useEpoVar = StringVar()
    global usernameInputVar
    usernameInputVar = StringVar()
    global passwordInputVar
    passwordInputVar = StringVar()
    global urlInputVar
    urlInputVar = StringVar()

    #Vars for Export Frame
    global usernameOutVar
    usernameOutVar = StringVar()
    global passwordOutVar
    passwordOutVar = StringVar()
    global projectOutVar
    projectOutVar = StringVar()
    global urlOutVar
    urlOutVar = StringVar()
    global nameChangeVar
    nameChangeVar = StringVar()
#Methods for the Main Frame
def clearData():
    print('Simba_support.clearData')
    sys.stdout.flush()

def getLocalData():
    print('Simba_support.getLocalData')
    sys.stdout.flush()

def loadMod():
    print('Simba_support.loadMod')
    sys.stdout.flush()

def openHelp():
    print('Simba_support.openHelp')
    sys.stdout.flush()

def saveLocalData():
    print('Simba_support.saveLocalData')
    sys.stdout.flush()
#Methods for Export
def buildUrlOut():
    print('exportPanel_support.buildUrlOut')
    sys.stdout.flush()

def pushDataSet():
    print('exportPanel_support.pushDataSet')
    sys.stdout.flush()
def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top
#Methods for  Hosted Service
def buildURL():
    print('hostedService_support.buildURL')
    sys.stdout.flush()

def getData():
    print('hostedService_support.getData')
    sys.stdout.flush()
def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None


if __name__ == '__main__':
    import Simba
    Simba.vp_start_gui()


