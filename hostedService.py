#! /usr/bin/env python
#
# GUI module generated by PAGE version 4.9
# In conjunction with Tcl version 8.6
#    Jul 24, 2017 09:27:01 AM
import sys

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1

import hostedService_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    hostedService_support.set_Tk_var()
    top = Hosted_Service (root)
    hostedService_support.init(root, top)
    root.mainloop()

w = None
def create_Hosted_Service(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    hostedService_support.set_Tk_var()
    top = Hosted_Service (w)
    hostedService_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Hosted_Service():
    global w
    w.destroy()
    w = None


class Hosted_Service:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#00407f' # Closest X11 color: 'DodgerBlue4'
        _ana1color = '#7f7f00' # Closest X11 color: 'gold4' 
        _ana2color = '#7f0000' # Closest X11 color: 'red4' 
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])
        self.style.map('.',foreground=
            [('selected', 'white'), ('active','white')])

        top.geometry("641x480")
        top.title("Hosted Service")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")



        self.selectLabFrame = ttk.Labelframe(top)
        self.selectLabFrame.place(relx=0.02, rely=0.0, relheight=0.47
                , relwidth=0.33)
        self.selectLabFrame.configure(text='''Input Project Selector''')
        self.selectLabFrame.configure(width=210)

        self.projectOutputEnt = ttk.Entry(self.selectLabFrame)
        self.projectOutputEnt.place(relx=0.05, rely=0.27, relheight=0.12
                , relwidth=0.79)
        self.projectOutputEnt.configure(textvariable=hostedService_support.projectInputVar)
        self.projectOutputEnt.configure(takefocus="")
        self.projectOutputEnt.configure(cursor="ibeam")

        self.seriesInputEnt = ttk.Entry(self.selectLabFrame)
        self.seriesInputEnt.place(relx=0.05, rely=0.62, relheight=0.12
                , relwidth=0.79)
        self.seriesInputEnt.configure(textvariable=hostedService_support.seriesInputVar)
        self.seriesInputEnt.configure(takefocus="")
        self.seriesInputEnt.configure(cursor="ibeam")

        self.seriesInputLab = ttk.Label(self.selectLabFrame)
        self.seriesInputLab.place(relx=0.05, rely=0.44, height=24, width=43)
        self.seriesInputLab.configure(background="#d9d9d9")
        self.seriesInputLab.configure(foreground="#000000")
        self.seriesInputLab.configure(relief=FLAT)
        self.seriesInputLab.configure(text='''Series''')

        self.projectInputLab = ttk.Label(self.selectLabFrame)
        self.projectInputLab.place(relx=0.05, rely=0.13, height=24, width=50)
        self.projectInputLab.configure(background="#d9d9d9")
        self.projectInputLab.configure(foreground="#000000")
        self.projectInputLab.configure(relief=FLAT)
        self.projectInputLab.configure(text='''Project''')

        self.buildURLButton = ttk.Button(self.selectLabFrame)
        self.buildURLButton.place(relx=0.05, rely=0.8, height=30, width=88)
        self.buildURLButton.configure(command=hostedService_support.buildURL)
        self.buildURLButton.configure(takefocus="")
        self.buildURLButton.configure(text='''Create URL''')

        self.timeLabFrame = ttk.Labelframe(top)
        self.timeLabFrame.place(relx=0.36, rely=0.0, relheight=0.47
                , relwidth=0.59)
        self.timeLabFrame.configure(text='''Time Query''')
        self.timeLabFrame.configure(width=380)

        self.startingTimeStdEnt = ttk.Entry(self.timeLabFrame)
        self.startingTimeStdEnt.place(relx=0.03, rely=0.36, relheight=0.12
                , relwidth=0.41)
        self.startingTimeStdEnt.configure(textvariable=hostedService_support.stdStartVar)
        self.startingTimeStdEnt.configure(takefocus="")
        self.startingTimeStdEnt.configure(cursor="ibeam")

        self.startingTimeEpoEnt = ttk.Entry(self.timeLabFrame)
        self.startingTimeEpoEnt.place(relx=0.5, rely=0.36, relheight=0.12
                , relwidth=0.41)
        self.startingTimeEpoEnt.configure(textvariable=hostedService_support.epoStartVar)
        self.startingTimeEpoEnt.configure(takefocus="")
        self.startingTimeEpoEnt.configure(cursor="ibeam")

        self.endingTimeStdEnt = ttk.Entry(self.timeLabFrame)
        self.endingTimeStdEnt.place(relx=0.03, rely=0.67, relheight=0.12
                , relwidth=0.41)
        self.endingTimeStdEnt.configure(textvariable=hostedService_support.stdEndVar)
        self.endingTimeStdEnt.configure(takefocus="")
        self.endingTimeStdEnt.configure(cursor="ibeam")

        self.endingTimeEpoEnt = ttk.Entry(self.timeLabFrame)
        self.endingTimeEpoEnt.place(relx=0.5, rely=0.67, relheight=0.12
                , relwidth=0.41)
        self.endingTimeEpoEnt.configure(textvariable=hostedService_support.epoEndVar)
        self.endingTimeEpoEnt.configure(takefocus="")
        self.endingTimeEpoEnt.configure(cursor="ibeam")

        self.endTimeLab = ttk.Label(self.timeLabFrame)
        self.endTimeLab.place(relx=0.03, rely=0.53, height=24, width=87)
        self.endTimeLab.configure(background="#d9d9d9")
        self.endTimeLab.configure(foreground="#000000")
        self.endTimeLab.configure(relief=FLAT)
        self.endTimeLab.configure(text='''Ending Time''')

        self.stdStartLab = ttk.Label(self.timeLabFrame)
        self.stdStartLab.place(relx=0.03, rely=0.09, height=44, width=156)
        self.stdStartLab.configure(background="#d9d9d9")
        self.stdStartLab.configure(foreground="#000000")
        self.stdStartLab.configure(relief=FLAT)
        self.stdStartLab.configure(text='''Starting Time 
(dd.mm.yyyy hh:mm:ss)''')

        self.epochLab = ttk.Label(self.timeLabFrame)
        self.epochLab.place(relx=0.5, rely=0.18, height=24, width=92)
        self.epochLab.configure(background="#d9d9d9")
        self.epochLab.configure(foreground="#000000")
        self.epochLab.configure(relief=FLAT)
        self.epochLab.configure(text='''(Epoch Time)''')

        self.style.map('TCheckbutton',background=
            [('selected', _bgcolor), ('active',"_ana2color")])
        self.useStdCheck = ttk.Checkbutton(self.timeLabFrame)
        self.useStdCheck.place(relx=0.08, rely=0.8, relwidth=0.32, relheight=0.0
                , height=26)
        self.useStdCheck.configure(variable=hostedService_support.useStdVar)
        self.useStdCheck.configure(takefocus="")
        self.useStdCheck.configure(text='''Use Standard''')
        self.useStdCheck.configure(width=121)

        self.useEpoCheck = ttk.Checkbutton(self.timeLabFrame)
        self.useEpoCheck.place(relx=0.55, rely=0.8, relwidth=0.27, relheight=0.0
                , height=26)
        self.useEpoCheck.configure(variable=hostedService_support.useEpoVar)
        self.useEpoCheck.configure(takefocus="")
        self.useEpoCheck.configure(text='''Use Epoch''')
        self.useEpoCheck.configure(width=102)

        self.accessLabFrame = ttk.Labelframe(top)
        self.accessLabFrame.place(relx=0.36, rely=0.48, relheight=0.3
                , relwidth=0.59)
        self.accessLabFrame.configure(text='''Access''')
        self.accessLabFrame.configure(width=380)

        self.usernameEnt = ttk.Entry(self.accessLabFrame)
        self.usernameEnt.place(relx=0.03, rely=0.34, relheight=0.18
                , relwidth=0.41)
        self.usernameEnt.configure(textvariable=hostedService_support.usernameInputVar)
        self.usernameEnt.configure(takefocus="")
        self.usernameEnt.configure(cursor="ibeam")

        self.passwordEnt = ttk.Entry(self.accessLabFrame)
        self.passwordEnt.place(relx=0.5, rely=0.34, relheight=0.18
                , relwidth=0.41)
        self.passwordEnt.configure(textvariable=hostedService_support.passwordInputVar)
        self.passwordEnt.configure(takefocus="")
        self.passwordEnt.configure(cursor="ibeam")

        self.usernameLab = ttk.Label(self.accessLabFrame)
        self.usernameLab.place(relx=0.03, rely=0.14, height=24, width=70)
        self.usernameLab.configure(background="#d9d9d9")
        self.usernameLab.configure(foreground="#000000")
        self.usernameLab.configure(relief=FLAT)
        self.usernameLab.configure(text='''Username''')

        self.passwordLab = ttk.Label(self.accessLabFrame)
        self.passwordLab.place(relx=0.5, rely=0.14, height=24, width=66)
        self.passwordLab.configure(background="#d9d9d9")
        self.passwordLab.configure(foreground="#000000")
        self.passwordLab.configure(relief=FLAT)
        self.passwordLab.configure(text='''Password''')

        self.urlEnt = ttk.Entry(self.accessLabFrame)
        self.urlEnt.place(relx=0.03, rely=0.76, relheight=0.18, relwidth=0.62)
        self.urlEnt.configure(textvariable=hostedService_support.urlInputVar)
        self.urlEnt.configure(takefocus="")
        self.urlEnt.configure(cursor="ibeam")

        self.urlLab = ttk.Label(self.accessLabFrame)
        self.urlLab.place(relx=0.03, rely=0.55, height=24, width=30)
        self.urlLab.configure(background="#d9d9d9")
        self.urlLab.configure(foreground="#000000")
        self.urlLab.configure(relief=FLAT)
        self.urlLab.configure(text='''URL''')

        self.getDataButton = ttk.Button(self.accessLabFrame)
        self.getDataButton.place(relx=0.68, rely=0.76, height=30, width=98)
        self.getDataButton.configure(command=hostedService_support.getData)
        self.getDataButton.configure(takefocus="")
        self.getDataButton.configure(text='''Get Data''')






if __name__ == '__main__':
    vp_start_gui()



