#! /usr/bin/env python
#
# Support module generated by PAGE version 4.9
# In conjunction with Tcl version 8.6
#    Jun 30, 2017 12:57:35 PM

import json
from tkinter import filedialog

from getBlock import *

try:
    from Tkinter import *
except ImportError:
    from tkinter import *
from base64 import b64encode

try:
    import ttk

    py3 = 0
except ImportError:
    import tkinter.ttk as ttk

    py3 = 1


def set_Tk_var():
    global dataSet
    global usernameVar
    global epocCheck

    usernameVar = StringVar()
    global passwordVar
    passwordVar = StringVar()
    global stdStartingTimeVar
    stdStartingTimeVar = StringVar()
    global stdEndingTimeVat
    stdEndingTimeVat = StringVar()
    global epochStartingTimeVar
    epochStartingTimeVar = StringVar()
    global epochEndingTimeVar
    epochEndingTimeVar = StringVar()
    global localFilePathVar
    localFilePathVar = StringVar()
    global localOutputPathVar
    localOutputPathVar = StringVar()
    global projectInputVar
    projectInputVar = StringVar()
    global seriesInputVar
    seriesInputVar = StringVar()
    global urlInputVar
    urlInputVar = StringVar()
    global cloudProjOutVar
    cloudProjOutVar = StringVar()
    global cloudOutSeriesVar
    cloudOutSeriesVar = StringVar()
    global cloudOutUrlVar
    cloudOutUrlVar = StringVar()


def epochTime():

    globals()['epocCheck'] = True


def findLocalFilePath():
    globals()['localFilePathVar'] = filedialog.askopenfilename(initialdir="/", title="Select file",
                                                  filetypes=(("all files", "*.*"), ("all files", "*.*")))


def findLocalOutPath():
    globals()['localOutputPathVar'] = filedialog.asksaveasfilename()


def getInputDataFromLogin():
    url = buildURL(projectInputVar, seriesInputVar)
    userAndPass = b64encode(bytes(usernameVar + ':' + passwordVar, "utf-8")).decode("ascii")
    globals()['dataSet'] = getJsonSet(userAndPass, url)


def pushDataSet():
    print('EarlyAlphaSim_support.pushDataSet')
    sys.stdout.flush()


def showRange():
    print('EarlyAlphaSim_support.showRange')
    sys.stdout.flush()


def standardTime():
    globals()['epocCheck'] = False


def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top


def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None


if __name__ == '__main__':
    import EarlyAlphaSim

    EarlyAlphaSim.vp_start_gui()
