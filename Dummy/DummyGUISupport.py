#! /usr/bin/env python
#
# Support module generated by PAGE version 4.9
# In conjunction with Tcl version 8.6
#    Jul 05, 2017 12:36:09 PM
import datetime
from base64 import b64encode
from tkinter import filedialog
from tkinter import messagebox

from Dummy.DummyGUI import *
from getBlock import *
from operationList import *

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk

    py3 = 0
except ImportError:
    import tkinter.ttk as ttk

    py3 = 1


def set_Tk_var():
    global epocCheck
    global dataSet
    dataSet = None
    epocCheck = None
    global loadVar
    loadVar = IntVar()
    loadVar.set(0)
    global operationSet

    global startingTimeStdVar
    startingTimeStdVar = StringVar()
    global endingTimeStdVar
    endingTimeStdVar = StringVar()
    global startingTimeEpoVar
    startingTimeEpoVar = StringVar()
    global endingTimeEpoVar
    endingTimeEpoVar = StringVar()
    global usernameVar
    usernameVar = StringVar()
    global passwordVar
    passwordVar = StringVar()
    global projectInputVar
    projectInputVar = StringVar()
    global seriesInputVar
    seriesInputVar = StringVar()
    global urlInputVar
    urlInputVar = StringVar()
    global projectOutputVar
    projectOutputVar = StringVar()
    global seriesOutputVar
    seriesOutputVar = StringVar()
    global outputURLVar
    outputURLVar = StringVar()
    global localInputPathVar
    localInputPathVar = StringVar()
    global localOutputPathVar
    localOutputPathVar = StringVar()



def genListSel():
    operationSet = [zeroData()]
    return operationSet


def doSelectedOps(var):
    set = genListSel()
    for x in var:
        try:
            set[x].functionX(globals())
            globals()['dataSet']['series'][0]['tags'][set[x].name] = "1"
        except ValueError:
            messagebox.showerror("Error", "There is no data set loaded or an invalid range of values have been selected\nPlease review your dataset options")



def epochTime():
    globals()['epocCheck'] = True


def findLocalFilePath():
    globals()['localInputPathVar'].set(filedialog.askopenfilename(initialdir="/", title="Select file",
                                                               filetypes=(("all files", "*.*"), ("all files", "*.*"))))
    if not ((globals()['localInputPathVar'] is None) or (globals()['localInputPathVar'] == "" )):
        return True


def findLocalOutPath():
    globals()['localOutputPathVar'].set(filedialog.asksaveasfilename(mode='w', defaultextension=".txt"))


def getInputDataFromLogin():
    url = buildURL(projectInputVar.get(), seriesInputVar.get())

    userAndPass = b64encode(bytes(usernameVar.get() + ':' + passwordVar.get(), "utf-8")).decode("ascii")
    globals()['dataSet'] = getJsonSet(userAndPass, url)
    print(globals()['dataSet'])
    if ('error' in globals()['dataSet']) or (globals()['dataSet'] == {}):
        globals()["dataSet"] = None
        globals()["loadVar"].set(0)
        raise ValueError
    else:
        globals()['loadVar'].set(100)

def getLocalData():
    print('EarlyAlphaSimdraft2_support.getLocalData')
    sys.stdout.flush()


def pushDataSet():
    print('EarlyAlphaSimdraft2_support.pushDataSet')
    sys.stdout.flush()


def saveLocalData():
    print('EarlyAlphaSimdraft2_support.saveLocalData')
    sys.stdout.flush()


def showRange():

    if globals()['dataSet'] is None:
        messagebox.showinfo("Notice", "There is no data set currently loaded")
    else:
        grabSet = globals()['dataSet']
        startRange = int(grabSet['series'][0]['timestamps'][0])
        endRange = int(grabSet['series'][0]['timestamps'][len(grabSet['series'][0]['timestamps'])-1])
        normalStartTimeRange = datetime.datetime.fromtimestamp(
            int((startRange/1000))
        ).strftime('%d-%m-%Y %H:%M:%S')
        normalEndTimeRange = datetime.datetime.fromtimestamp(
            int((endRange/1000))
        ).strftime('%d-%m-%Y %H:%M:%S')
        messagebox.showinfo("Range Information",
                            "The value range of this data set is as follows: \nEpoch Time:  " + str(startRange) +
                            " <-> " + str(endRange) + "\nStandard Date:  " + normalStartTimeRange + " <-> "
                            + normalEndTimeRange)


def standardTime():
    globals()['epocCheck'] = False


def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top


def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None


if __name__ == '__main__':
    import Dummy.DummyGUI

    Dummy.DummyGUI.vp_start_gui()
