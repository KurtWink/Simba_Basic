#! /usr/bin/env python
#
# GUI module generated by PAGE version 4.9
# In conjunction with Tcl version 8.6
#    Jul 05, 2017 12:02:21 PM
import sys

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1

import Dummy.DummyGUISupport

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    Dummy.DummyGUISupport.set_Tk_var()
    top = Simba_Frame (root)
    Dummy.DummyGUISupport.init(root, top)
    root.mainloop()

w = None
def create_Simba_Frame(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    Dummy.DummyGUISupport.set_Tk_var()
    top = Simba_Frame (w)
    Dummy.DummyGUISupport.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Simba_Frame():
    global w
    w.destroy()
    w = None


class Simba_Frame:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("1900x985+1+1")
        top.title("Simba Frame")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")



        self.scrolledlistbox1 = ScrolledListBox(top,selectmode=EXTENDED)
        self.scrolledlistbox1.place(relx=0.77, rely=0.05, relheight=0.5
                , relwidth=0.22)
        self.scrolledlistbox1.configure(background="white")
        self.scrolledlistbox1.configure(disabledforeground="#a3a3a3")
        self.scrolledlistbox1.configure(font="TkFixedFont")
        self.scrolledlistbox1.configure(foreground="black")
        self.scrolledlistbox1.configure(highlightbackground="#d9d9d9")
        self.scrolledlistbox1.configure(highlightcolor="#d9d9d9")
        self.scrolledlistbox1.configure(selectbackground="#c4c4c4")
        self.scrolledlistbox1.configure(selectforeground="black")
        self.scrolledlistbox1.configure(width=10)

        for x in Dummy.DummyGUISupport.genListSel():
            self.scrolledlistbox1.insert(END,x.name)



        self.Label1 = Label(top)
        self.Label1.place(relx=0.83, rely=0.01, height=26, width=232)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(activeforeground="black")
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(text='''Data Operations List''')

        self.style.configure('TNotebook.Tab', background=_bgcolor)
        self.style.configure('TNotebook.Tab', foreground=_fgcolor)
        self.style.map('TNotebook.Tab', background=
            [('selected', _compcolor), ('active',_ana2color)])
        self.optionsNB = ttk.Notebook(top)
        self.optionsNB.place(relx=0.01, rely=0.35, relheight=0.56, relwidth=0.27)

        self.optionsNB.configure(width=504)
        self.optionsNB.configure(takefocus="")
        self.optionsNB_t1 = ttk.Frame(self.optionsNB)
        self.optionsNB.add(self.optionsNB_t1, padding=3)
        self.optionsNB.tab(0, text="Time",underline="-1",)
        self.optionsNB_t3 = ttk.Frame(self.optionsNB)
        self.optionsNB.add(self.optionsNB_t3, padding=3)
        self.optionsNB.tab(1, text="Help",underline="-1",)

        self.timeFrame1 = ttk.Labelframe(self.optionsNB_t1)
        self.timeFrame1.place(relx=0.0, rely=0.0, relheight=0.97, relwidth=0.98)
        self.timeFrame1.configure(text='''Optional Time Period''')
        self.timeFrame1.configure(width=490)

        self.starttimeEnt1 = ttk.Entry(self.timeFrame1)
        self.starttimeEnt1.place(relx=0.02, rely=0.1, relheight=0.05
                , relwidth=0.4)
        self.starttimeEnt1.configure(takefocus="", textvariable = Dummy.DummyGUISupport.startingTimeStdVar)
        self.starttimeEnt1.configure(cursor="ibeam")

        self.starttimeLab1 = ttk.Label(self.timeFrame1)
        self.starttimeLab1.place(relx=0.02, rely=0.04, height=24, width=249)
        self.starttimeLab1.configure(background="#d9d9d9")
        self.starttimeLab1.configure(foreground="#000000")
        self.starttimeLab1.configure(relief=FLAT)
        self.starttimeLab1.configure(text='''Starting Time (dd.mm.yyyy hh:mm:ss)''')

        self.endtimeLab1 = ttk.Label(self.timeFrame1)
        self.endtimeLab1.place(relx=0.02, rely=0.16, height=24, width=87)
        self.endtimeLab1.configure(background="#d9d9d9")
        self.endtimeLab1.configure(foreground="#000000")
        self.endtimeLab1.configure(relief=FLAT)
        self.endtimeLab1.configure(text='''Ending Time''')

        self.endtimeEnt1 = ttk.Entry(self.timeFrame1)
        self.endtimeEnt1.place(relx=0.02, rely=0.22, relheight=0.05
                , relwidth=0.4)
        self.endtimeEnt1.configure(takefocus="", textvariable = Dummy.DummyGUISupport.endingTimeStdVar)
        self.endtimeEnt1.configure(cursor="ibeam")

        self.timeButton1 = ttk.Button(self.timeFrame1)
        self.timeButton1.place(relx=0.08, rely=0.28, height=40, width=108)
        self.timeButton1.configure(command=Dummy.DummyGUISupport.standardTime)
        self.timeButton1.configure(takefocus="")
        self.timeButton1.configure(text='''Use Standard''')

        self.epochstartENT = ttk.Entry(self.timeFrame1)
        self.epochstartENT.place(relx=0.55, rely=0.1, relheight=0.05
                , relwidth=0.4)
        self.epochstartENT.configure(takefocus="", textvariable = Dummy.DummyGUISupport.endingTimeEpoVar)
        self.epochstartENT.configure(cursor="ibeam")

        self.epochstartLab = ttk.Label(self.timeFrame1)
        self.epochstartLab.place(relx=0.55, rely=0.04, height=24, width=148)
        self.epochstartLab.configure(background="#d9d9d9")
        self.epochstartLab.configure(foreground="#000000")
        self.epochstartLab.configure(relief=FLAT)
        self.epochstartLab.configure(text='''Starting Time (Epoch)''')

        self.endingTimeEpoEnt = ttk.Entry(self.timeFrame1)
        self.endingTimeEpoEnt.place(relx=0.55, rely=0.22, relheight=0.05, relwidth=0.4)
        self.endingTimeEpoEnt.configure(takefocus="", textvariable = Dummy.DummyGUISupport.endingTimeEpoVar)
        self.endingTimeEpoEnt.configure(cursor="ibeam")

        self.epochendLab = ttk.Label(self.timeFrame1)
        self.epochendLab.place(relx=0.55, rely=0.16, height=24, width=91)
        self.epochendLab.configure(background="#d9d9d9")
        self.epochendLab.configure(foreground="#000000")
        self.epochendLab.configure(relief=FLAT)
        self.epochendLab.configure(text='''Ending Time''')

        self.epochButton = ttk.Button(self.timeFrame1)
        self.epochButton.place(relx=0.65, rely=0.28, height=40, width=108)
        self.epochButton.configure(command=Dummy.DummyGUISupport.epochTime)
        self.epochButton.configure(takefocus="")
        self.epochButton.configure(text='''Use Epoch''')

        self.showTimeButton = ttk.Button(self.timeFrame1)
        self.showTimeButton.place(relx=0.39, rely=0.28, height=40, width=98)
        self.showTimeButton.configure(command=Dummy.DummyGUISupport.showRange)
        self.showTimeButton.configure(takefocus="")
        self.showTimeButton.configure(text='''Range''')

        self.dataTagBox = Listbox(top)
        self.dataTagBox.place(relx=0.67, rely=0.05, relheight=0.18, relwidth=0.09)
        self.dataTagBox.configure(background="white")
        self.dataTagBox.configure(disabledforeground="#a3a3a3")
        self.dataTagBox.configure(font="TkFixedFont")
        self.dataTagBox.configure(foreground="#000000")
        self.dataTagBox.configure(highlightbackground="#d9d9d9")
        self.dataTagBox.configure(highlightcolor="black")
        self.dataTagBox.configure(selectbackground="#c4c4c4")
        self.dataTagBox.configure(selectforeground="black")
        self.dataTagBox.configure(width=164)

        self.cloudNB = ttk.Notebook(top)
        self.cloudNB.place(relx=0.01, rely=0.01, relheight=0.33, relwidth=0.2)
        self.cloudNB.configure(width=384)
        self.cloudNB.configure(takefocus="")
        self.cloudNB_t0 = ttk.Frame(self.cloudNB)
        self.cloudNB.add(self.cloudNB_t0, padding=3)
        self.cloudNB.tab(0, text="Login Info",underline="-1",)
        self.cloudNB_t1 = ttk.Frame(self.cloudNB)
        self.cloudNB.add(self.cloudNB_t1, padding=3)
        self.cloudNB.tab(1, text="Cloud Input Location",underline="-1",)
        self.cloudNB_t2 = ttk.Frame(self.cloudNB)
        self.cloudNB.add(self.cloudNB_t2, padding=3)
        self.cloudNB.tab(2, text="Cloud Output Location",underline="-1",)

        self.userinfoFrame1 = ttk.Labelframe(self.cloudNB_t0)
        self.userinfoFrame1.place(relx=0.03, rely=0.03, relheight=0.36
                , relwidth=0.92)
        self.userinfoFrame1.configure(text='''User Information''')
        self.userinfoFrame1.configure(width=350)

        self.UsernameEnt1 = ttk.Entry(self.userinfoFrame1)
        self.UsernameEnt1.place(relx=0.03, rely=0.57, relheight=0.25
                , relwidth=0.42)
        self.UsernameEnt1.configure(textvariable=Dummy.DummyGUISupport.usernameVar)
        self.UsernameEnt1.configure(takefocus="")
        self.UsernameEnt1.configure(cursor="ibeam")

        self.PasswordEnt1 = ttk.Entry(self.userinfoFrame1)
        self.PasswordEnt1.place(relx=0.51, rely=0.57, relheight=0.25
                , relwidth=0.42)
        self.PasswordEnt1.configure(textvariable=Dummy.DummyGUISupport.passwordVar)
        self.PasswordEnt1.configure(takefocus="")
        self.PasswordEnt1.configure(cursor="ibeam")

        self.userLab1 = ttk.Label(self.userinfoFrame1)
        self.userLab1.place(relx=0.03, rely=0.25, height=24, width=125)
        self.userLab1.configure(background="#d9d9d9")
        self.userLab1.configure(foreground="#000000")
        self.userLab1.configure(relief=FLAT)
        self.userLab1.configure(text='''Username''')

        self.passwordLab1 = ttk.Label(self.userinfoFrame1)
        self.passwordLab1.place(relx=0.51, rely=0.25, height=24, width=145)
        self.passwordLab1.configure(background="#d9d9d9")
        self.passwordLab1.configure(foreground="#000000")
        self.passwordLab1.configure(relief=FLAT)
        self.passwordLab1.configure(text='''Password''')

        self.projectselFrame1 = ttk.Labelframe(self.cloudNB_t1)
        self.projectselFrame1.place(relx=0.03, rely=0.0, relheight=0.98
                , relwidth=0.92)
        self.projectselFrame1.configure(text='''Project Selector''')
        self.projectselFrame1.configure(width=350)

        self.projectEnt1 = ttk.Entry(self.projectselFrame1)
        self.projectEnt1.place(relx=0.06, rely=0.18, relheight=0.09
                , relwidth=0.47)
        self.projectEnt1.configure(takefocus="", textvariable = Dummy.DummyGUISupport.projectInputVar)
        self.projectEnt1.configure(cursor="ibeam")

        self.seriesEnt1 = ttk.Entry(self.projectselFrame1)
        self.seriesEnt1.place(relx=0.06, rely=0.39, relheight=0.09
                , relwidth=0.47)
        self.seriesEnt1.configure(takefocus="", textvariable = Dummy.DummyGUISupport.seriesInputVar)
        self.seriesEnt1.configure(cursor="ibeam")

        self.projectLab1 = ttk.Label(self.projectselFrame1)
        self.projectLab1.place(relx=0.06, rely=0.07, height=24, width=165)
        self.projectLab1.configure(background="#d9d9d9")
        self.projectLab1.configure(foreground="#000000")
        self.projectLab1.configure(relief=FLAT)
        self.projectLab1.configure(text='''Project''')

        self.seriesLab1 = ttk.Label(self.projectselFrame1)
        self.seriesLab1.place(relx=0.06, rely=0.28, height=24, width=155)
        self.seriesLab1.configure(background="#d9d9d9")
        self.seriesLab1.configure(foreground="#000000")
        self.seriesLab1.configure(relief=FLAT)
        self.seriesLab1.configure(text='''Series''')

        self.urlEnt1 = Entry(self.projectselFrame1)
        self.urlEnt1.place(relx=0.06, rely=0.6, relheight=0.08, relwidth=0.9)
        self.urlEnt1.configure(background="white")
        self.urlEnt1.configure(disabledforeground="#a3a3a3")
        self.urlEnt1.configure(font="TkFixedFont")
        self.urlEnt1.configure(foreground="#000000")
        self.urlEnt1.configure(highlightbackground="#d9d9d9")
        self.urlEnt1.configure(highlightcolor="black")
        self.urlEnt1.configure(insertbackground="black")
        self.urlEnt1.configure(selectbackground="#c4c4c4")
        self.urlEnt1.configure(selectforeground="black")

        self.urlLab1 = Label(self.projectselFrame1)
        self.urlLab1.place(relx=0.06, rely=0.49, height=26, width=32)
        self.urlLab1.configure(activebackground="#f9f9f9")
        self.urlLab1.configure(activeforeground="black")
        self.urlLab1.configure(background="#d9d9d9")
        self.urlLab1.configure(disabledforeground="#a3a3a3")
        self.urlLab1.configure(foreground="#000000")
        self.urlLab1.configure(highlightbackground="#d9d9d9")
        self.urlLab1.configure(highlightcolor="black")
        self.urlLab1.configure(text='''URL''')

        self.dataButton1 = ttk.Button(self.projectselFrame1)
        self.dataButton1.place(relx=0.06, rely=0.7, height=30, width=98)
        self.dataButton1.configure(command=lambda:inputHandler())
        self.dataButton1.configure(takefocus="")
        self.dataButton1.configure(text='''Get Data''')
        def inputHandler():
            try:
                Dummy.DummyGUISupport.getInputDataFromLogin()
                updateTags()
            except ValueError:
                from tkinter import messagebox
                messagebox.showerror("Error", "No data set was loaded, please review your directories and credentials")


        def updateTags():
            self.dataTagBox.delete(0, END)
            if not(('error' in Dummy.DummyGUISupport.dataSet)or (Dummy.DummyGUISupport.dataSet == {})):
                for key, value in Dummy.DummyGUISupport.dataSet['series'][0]['tags'].items():
                        self.dataTagBox.insert(END, key+ " : "+ value)
        self.projectselOutputFrame2 = ttk.Labelframe(self.cloudNB_t2)
        self.projectselOutputFrame2.place(relx=0.03, rely=0.0, relheight=0.98
                , relwidth=0.92)
        self.projectselOutputFrame2.configure(text='''Project Selector''')
        self.projectselOutputFrame2.configure(width=350)

        self.projectEnt2 = ttk.Entry(self.projectselOutputFrame2)
        self.projectEnt2.place(relx=0.06, rely=0.18, relheight=0.09
                , relwidth=0.47)
        self.projectEnt2.configure(takefocus="")
        self.projectEnt2.configure(cursor="ibeam")

        self.seriesEnt2 = ttk.Entry(self.projectselOutputFrame2)
        self.seriesEnt2.place(relx=0.06, rely=0.39, relheight=0.09
                , relwidth=0.47)
        self.seriesEnt2.configure(takefocus="")
        self.seriesEnt2.configure(cursor="ibeam")

        self.projectLab2 = ttk.Label(self.projectselOutputFrame2)
        self.projectLab2.place(relx=0.06, rely=0.07, height=24, width=165)
        self.projectLab2.configure(background="#d9d9d9")
        self.projectLab2.configure(foreground="#000000")
        self.projectLab2.configure(relief=FLAT)
        self.projectLab2.configure(text='''Project''')

        self.seriesLab2 = ttk.Label(self.projectselOutputFrame2)
        self.seriesLab2.place(relx=0.06, rely=0.28, height=24, width=155)
        self.seriesLab2.configure(background="#d9d9d9")
        self.seriesLab2.configure(foreground="#000000")
        self.seriesLab2.configure(relief=FLAT)
        self.seriesLab2.configure(text='''Series''')

        self.urlEnt2 = Entry(self.projectselOutputFrame2)
        self.urlEnt2.place(relx=0.06, rely=0.6, relheight=0.08, relwidth=0.9)
        self.urlEnt2.configure(background="white")
        self.urlEnt2.configure(disabledforeground="#a3a3a3")
        self.urlEnt2.configure(font="TkFixedFont")
        self.urlEnt2.configure(foreground="#000000")
        self.urlEnt2.configure(highlightbackground="#d9d9d9")
        self.urlEnt2.configure(highlightcolor="black")
        self.urlEnt2.configure(insertbackground="black")
        self.urlEnt2.configure(selectbackground="#c4c4c4")
        self.urlEnt2.configure(selectforeground="black")

        self.urlLab2 = Label(self.projectselOutputFrame2)
        self.urlLab2.place(relx=0.06, rely=0.49, height=26, width=32)
        self.urlLab2.configure(activebackground="#f9f9f9")
        self.urlLab2.configure(activeforeground="black")
        self.urlLab2.configure(background="#d9d9d9")
        self.urlLab2.configure(disabledforeground="#a3a3a3")
        self.urlLab2.configure(foreground="#000000")
        self.urlLab2.configure(highlightbackground="#d9d9d9")
        self.urlLab2.configure(highlightcolor="black")
        self.urlLab2.configure(text='''URL''')

        self.dataButton2 = ttk.Button(self.projectselOutputFrame2)
        self.dataButton2.place(relx=0.06, rely=0.7, height=30, width=98)
        self.dataButton2.configure(command=Dummy.DummyGUISupport.pushDataSet)
        self.dataButton2.configure(takefocus="")
        self.dataButton2.configure(text='''Push Data''')

        self.TLabel1 = ttk.Label(top)
        self.TLabel1.place(relx=0.69, rely=0.01, height=24, width=71)
        self.TLabel1.configure(background="#d9d9d9")
        self.TLabel1.configure(foreground="#000000")
        self.TLabel1.configure(relief=FLAT)
        self.TLabel1.configure(text='''Data Tags''')

        self.localfileNB = ttk.Notebook(top)
        self.localfileNB.place(relx=0.21, rely=0.01, relheight=0.33
                , relwidth=0.19)
        self.localfileNB.configure(width=364)
        self.localfileNB.configure(takefocus="")
        self.localfileNB_t1 = ttk.Frame(self.localfileNB)
        self.localfileNB.add(self.localfileNB_t1, padding=3)
        self.localfileNB.tab(0, text="Local File",underline="-1",)

        self.directInputFram1 = ttk.Labelframe(self.localfileNB_t1)
        self.directInputFram1.place(relx=0.03, rely=0.03, relheight=0.36
                , relwidth=0.92)
        self.directInputFram1.configure(text='''Direct Input''')
        self.directInputFram1.configure(width=330)

        self.inputDirectEnt1 = ttk.Entry(self.directInputFram1)
        self.inputDirectEnt1.place(relx=0.03, rely=0.57, relheight=0.25
                , relwidth=0.5)
        self.inputDirectEnt1.configure(takefocus="")
        self.inputDirectEnt1.configure(cursor="ibeam")

        self.fileInputPathLab1 = ttk.Label(self.directInputFram1)
        self.fileInputPathLab1.place(relx=0.03, rely=0.25, height=24, width=98)
        self.fileInputPathLab1.configure(background="#d9d9d9")
        self.fileInputPathLab1.configure(foreground="#000000")
        self.fileInputPathLab1.configure(relief=FLAT)
        self.fileInputPathLab1.configure(text='''File Input Path''')

        self.fileInputButton1 = ttk.Button(self.directInputFram1)
        self.fileInputButton1.place(relx=0.61, rely=0.57, height=30, width=98)
        self.fileInputButton1.configure(command=lambda: checkPath())
        self.fileInputButton1.configure(takefocus="")
        self.fileInputButton1.configure(text='''Browse''')
        def checkPath():
            if(Dummy.DummyGUISupport.findLocalFilePath()):
                self.localGetButton.configure(state=NORMAL)
                self.inputDirectEnt1.insert(0,Dummy.DummyGUISupport.localInputPathVar.get())
        self.outputLocFrame1 = ttk.Labelframe(self.localfileNB_t1)
        self.outputLocFrame1.place(relx=0.03, rely=0.41, relheight=0.36
                , relwidth=0.92)
        self.outputLocFrame1.configure(text='''Output Location''')
        self.outputLocFrame1.configure(width=330)

        self.localoutputpathEnt1 = ttk.Entry(self.outputLocFrame1)
        self.localoutputpathEnt1.place(relx=0.03, rely=0.57, relheight=0.25
                , relwidth=0.5)
        self.localoutputpathEnt1.configure(takefocus="")
        self.localoutputpathEnt1.configure(cursor="ibeam")
        self.localoutputpathEnt1.configure(textvariable=Dummy.DummyGUISupport.localOutputPathVar)

        self.localoutputpathLab1 = ttk.Label(self.outputLocFrame1)
        self.localoutputpathLab1.place(relx=0.03, rely=0.25, height=24
                , width=149)
        self.localoutputpathLab1.configure(background="#d9d9d9")
        self.localoutputpathLab1.configure(foreground="#000000")
        self.localoutputpathLab1.configure(relief=FLAT)
        self.localoutputpathLab1.configure(text='''Local Output File Path''')

        self.locOutputPathButton1 = ttk.Button(self.outputLocFrame1)
        self.locOutputPathButton1.place(relx=0.61, rely=0.57, height=30
                , width=98)
        self.locOutputPathButton1.configure(command=Dummy.DummyGUISupport.findLocalOutPath)
        self.locOutputPathButton1.configure(takefocus="")
        self.locOutputPathButton1.configure(text='''Browse''')

        self.localGetButton = ttk.Button(self.localfileNB_t1)
        self.localGetButton.place(relx=0.06, rely=0.83, height=30, width=108)
        self.localGetButton.configure(command=Dummy.DummyGUISupport.getLocalData)
        self.localGetButton.configure(takefocus="")
        self.localGetButton.configure(text='''Get Local Data''')
        self.localGetButton.configure(state=DISABLED)

        self.pushlocalButton = ttk.Button(self.localfileNB_t1)
        self.pushlocalButton.place(relx=0.58, rely=0.83, height=30, width=116)
        self.pushlocalButton.configure(command=Dummy.DummyGUISupport.saveLocalData)
        self.pushlocalButton.configure(takefocus="")
        self.pushlocalButton.configure(text='''Save Local Data''')
        self.pushlocalButton.configure(state=DISABLED)

        self.doSelectedOpButton = ttk.Button(top)
        self.doSelectedOpButton.place(relx=0.77, rely=0.58, height=30, width=126)

        self.doSelectedOpButton.configure(command= lambda: [Dummy.DummyGUISupport.doSelectedOps(self.scrolledlistbox1.curselection()),updateTags()])
        self.doSelectedOpButton.configure(takefocus="")
        self.doSelectedOpButton.configure(text='''Apply Operations''')

        self.loadBar = ttk.Progressbar(top)
        self.loadBar.place(relx=0.73, rely=0.25, relwidth=0.02, relheight=0.0
                           , height=22)
        self.loadBar.configure(length="40")
        self.loadBar.configure(variable=Dummy.DummyGUISupport.loadVar)

        self.loadLab = ttk.Label(top)
        self.loadLab.place(relx=0.67, rely=0.25, height=24, width=81)
        self.loadLab.configure(background="#d9d9d9")
        self.loadLab.configure(foreground="#000000")
        self.loadLab.configure(relief=FLAT)
        self.loadLab.configure(text='''Load Status''')





# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        #self.configure(yscrollcommand=_autoscroll(vsb),
        #    xscrollcommand=_autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = Pack.__dict__.keys() | Grid.__dict__.keys() \
                  | Place.__dict__.keys()
        else:
            methods = Pack.__dict__.keys() + Grid.__dict__.keys() \
                  + Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        return func(cls, container, **kw)
    return wrapped

class ScrolledListBox(AutoScroll, Listbox):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        Listbox.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

if __name__ == '__main__':
    vp_start_gui()


