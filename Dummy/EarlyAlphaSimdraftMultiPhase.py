#! /usr/bin/env python
#
# GUI module generated by PAGE version 4.9
# In conjunction with Tcl version 8.6
#    Jul 14, 2017 09:12:26 AM

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk

    py3 = 0
except ImportError:
    import tkinter.ttk as ttk

    py3 = 1

import Dummy.EarlyAlphaSimdraftMultiPhase_support


def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    Dummy.EarlyAlphaSimdraftMultiPhase_support.set_Tk_var()
    top = Simba_Frame(root)
    Dummy.EarlyAlphaSimdraftMultiPhase_support.init(root, top)
    root.mainloop()


w = None


def create_Simba_Frame(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel(root)
    Dummy.EarlyAlphaSimdraftMultiPhase_support.set_Tk_var()
    top = Simba_Frame(w)
    Dummy.EarlyAlphaSimdraftMultiPhase_support.init(w, top, *args, **kwargs)
    return (w, top)


def destroy_Simba_Frame():
    global w
    w.destroy()
    w = None


class Simba_Frame:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9'  # X11 color: 'gray85'
        _ana1color = '#d9d9d9'  # X11 color: 'gray85'
        _ana2color = '#d9d9d9'  # X11 color: 'gray85'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.', background=_bgcolor)
        self.style.configure('.', foreground=_fgcolor)
        self.style.configure('.', font="TkDefaultFont")
        self.style.map('.', background=
        [('selected', _compcolor), ('active', _ana2color)])

        top.geometry("1900x985+1+1")
        top.title("Simba Frame")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.Scrolledlistbox1 = ScrolledListBox(top)
        self.Scrolledlistbox1.place(relx=0.77, rely=0.05, relheight=0.5
                                    , relwidth=0.22)
        self.Scrolledlistbox1.configure(background="white")
        self.Scrolledlistbox1.configure(disabledforeground="#a3a3a3")
        self.Scrolledlistbox1.configure(font="TkFixedFont")
        self.Scrolledlistbox1.configure(foreground="black")
        self.Scrolledlistbox1.configure(highlightbackground="#d9d9d9")
        self.Scrolledlistbox1.configure(highlightcolor="#d9d9d9")
        self.Scrolledlistbox1.configure(selectbackground="#c4c4c4")
        self.Scrolledlistbox1.configure(selectforeground="black")
        self.Scrolledlistbox1.configure(width=10)
        for x in Dummy.genDataList.genData():
            self.Scrolledlistbox1.insert(END, x.name)

        self.Label1 = Label(top)
        self.Label1.place(relx=0.83, rely=0.01, height=26, width=232)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(activeforeground="black")
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(text='''Data Operations List''')

        self.dataTagBox = Listbox(top)
        self.dataTagBox.place(relx=0.67, rely=0.05, relheight=0.18, relwidth=0.09)
        self.dataTagBox.configure(background="white")
        self.dataTagBox.configure(disabledforeground="#a3a3a3")
        self.dataTagBox.configure(font="TkFixedFont")
        self.dataTagBox.configure(foreground="#000000")
        self.dataTagBox.configure(highlightbackground="#d9d9d9")
        self.dataTagBox.configure(highlightcolor="black")
        self.dataTagBox.configure(selectbackground="#c4c4c4")
        self.dataTagBox.configure(selectforeground="black")
        self.dataTagBox.configure(width=164)

        self.TLabel1 = ttk.Label(top)
        self.TLabel1.place(relx=0.69, rely=0.01, height=24, width=71)
        self.TLabel1.configure(background="#d9d9d9")
        self.TLabel1.configure(foreground="#000000")
        self.TLabel1.configure(relief=FLAT)
        self.TLabel1.configure(text='''Data Tags''')

        self.doSelectedOpButton = ttk.Button(top)
        self.doSelectedOpButton.place(relx=0.77, rely=0.58, height=30, width=126)

        self.doSelectedOpButton.configure(
            command=lambda: [
                Dummy.EarlyAlphaSimdraftMultiPhase_support.doSelectedOps(self.Scrolledlistbox1.curselection()),
                updateTags()])
        self.doSelectedOpButton.configure(takefocus="")
        self.doSelectedOpButton.configure(text='''Apply Operations''')

        self.menubar = Menu(top, font="TkMenuFont", bg=_bgcolor, fg=_fgcolor)
        top.configure(menu=self.menubar)

        self.loadBar = ttk.Progressbar(top)
        self.loadBar.place(relx=0.73, rely=0.25, relwidth=0.02, relheight=0.0
                           , height=22)
        self.loadBar.configure(variable=Dummy.EarlyAlphaSimdraftMultiPhase_support.loadVar)

        self.loadLab = ttk.Label(top)
        self.loadLab.place(relx=0.67, rely=0.25, height=24, width=81)
        self.loadLab.configure(background="#d9d9d9")
        self.loadLab.configure(foreground="#000000")
        self.loadLab.configure(relief=FLAT)
        self.loadLab.configure(text='''Load Status''')

        self.style.configure('TNotebook.Tab', background=_bgcolor)
        self.style.configure('TNotebook.Tab', foreground=_fgcolor)
        self.style.map('TNotebook.Tab', background=
        [('selected', _compcolor), ('active', _ana2color)])
        self.mainBookNB = ttk.Notebook(top)
        self.mainBookNB.place(relx=0.0, rely=0.0, relheight=0.85, relwidth=0.4)
        self.mainBookNB.configure(width=764)
        self.mainBookNB.configure(takefocus="")
        self.mainBookNB_t1 = ttk.Frame(self.mainBookNB)
        self.mainBookNB.add(self.mainBookNB_t1, padding=3)
        self.mainBookNB.tab(0, text="Data Selection", underline="-1", )
        self.mainBookNB_t2 = ttk.Frame(self.mainBookNB)
        self.mainBookNB.add(self.mainBookNB_t2, padding=3)
        self.mainBookNB.tab(1, text="Page 2", underline="-1", )

        self.TFrame1 = ttk.Frame(self.mainBookNB_t1)
        self.TFrame1.place(relx=0.01, rely=0.58, relheight=0.35, relwidth=0.41)
        self.TFrame1.configure(relief=GROOVE)
        self.TFrame1.configure(borderwidth="2")
        self.TFrame1.configure(relief=GROOVE)
        self.TFrame1.configure(width=315)

        self.localoutputpathLab1 = ttk.Label(self.TFrame1)
        self.localoutputpathLab1.place(relx=0.03, rely=0.46, height=24
                                       , width=149)
        self.localoutputpathLab1.configure(background="#d9d9d9")
        self.localoutputpathLab1.configure(foreground="#000000")
        self.localoutputpathLab1.configure(relief=FLAT)
        self.localoutputpathLab1.configure(text='''Local Output File Path''')

        self.localoutputpathEnt1 = ttk.Entry(self.TFrame1)
        self.localoutputpathEnt1.place(relx=0.03, rely=0.6, relheight=0.09
                                       , relwidth=0.53)
        self.localoutputpathEnt1.configure(textvariable=Dummy.EarlyAlphaSimdraftMultiPhase_support.localOutPathVar)
        self.localoutputpathEnt1.configure(takefocus="")
        self.localoutputpathEnt1.configure(cursor="ibeam")

        self.locOutputPathButton1 = ttk.Button(self.TFrame1)
        self.locOutputPathButton1.place(relx=0.63, rely=0.6, height=30, width=98)

        self.locOutputPathButton1.configure(command=lambda: enableOut())
        self.locOutputPathButton1.configure(takefocus="")
        self.locOutputPathButton1.configure(text='''Browse''')
        def enableOut():
            Dummy.EarlyAlphaSimdraftMultiPhase_support.findLocalOutPath()
            self.pushlocalButton1.configure(state=NORMAL)

        self.fileInputPathLab1 = ttk.Label(self.TFrame1)
        self.fileInputPathLab1.place(relx=0.03, rely=0.04, height=24, width=98)
        self.fileInputPathLab1.configure(background="#d9d9d9")
        self.fileInputPathLab1.configure(foreground="#000000")
        self.fileInputPathLab1.configure(relief=FLAT)
        self.fileInputPathLab1.configure(text='''File Input Path''')

        self.inputDirectEnt1 = ttk.Entry(self.TFrame1)
        self.inputDirectEnt1.place(relx=0.03, rely=0.15, relheight=0.09
                                   , relwidth=0.53)
        self.inputDirectEnt1.configure(textvariable=Dummy.EarlyAlphaSimdraftMultiPhase_support.localInputPathVar)
        self.inputDirectEnt1.configure(takefocus="")
        self.inputDirectEnt1.configure(cursor="ibeam")

        self.fileInputButton1 = ttk.Button(self.TFrame1)
        self.fileInputButton1.place(relx=0.63, rely=0.15, height=30, width=98)
        self.fileInputButton1.configure(command=lambda: checkPath())
        self.fileInputButton1.configure(takefocus="")
        self.fileInputButton1.configure(text='''Browse''')

        def checkPath():
            Dummy.EarlyAlphaSimdraftMultiPhase_support.findLocalFilePath()
            self.localGetButton1.configure(state=NORMAL)


        self.pushlocalButton1 = ttk.Button(self.TFrame1)
        self.pushlocalButton1.place(relx=0.06, rely=0.74, height=30, width=116)
        self.pushlocalButton1.configure(command=Dummy.EarlyAlphaSimdraftMultiPhase_support.saveLocalData)
        self.pushlocalButton1.configure(takefocus="")
        self.pushlocalButton1.configure(text='''Save Local Data''')
        self.pushlocalButton1.configure(state=DISABLED)



        self.localGetButton1 = ttk.Button(self.TFrame1)
        self.localGetButton1.place(relx=0.06, rely=0.29, height=30, width=118)
        self.localGetButton1.configure(command=lambda: getLocal())
        self.localGetButton1.configure(takefocus="")
        self.localGetButton1.configure(text='''Get Local Data''')
        self.localGetButton1.configure(state=DISABLED)
        def getLocal():
            try:
                Dummy.EarlyAlphaSimdraftMultiPhase_support.getLocalData()
                updateTags()
            except ValueError:
                from tkinter import messagebox
                messagebox.showerror("Error", "No data set was loaded, please review your directories and credentials")

        self.userinfoFrame1 = ttk.Labelframe(self.mainBookNB_t1)
        self.userinfoFrame1.place(relx=0.01, rely=0.0, relheight=0.13
                                  , relwidth=0.46)
        self.userinfoFrame1.configure(text='''User Information''')
        self.userinfoFrame1.configure(width=350)

        self.UsernameEnt1 = ttk.Entry(self.userinfoFrame1)
        self.UsernameEnt1.place(relx=0.03, rely=0.57, relheight=0.25
                                , relwidth=0.42)
        self.UsernameEnt1.configure(textvariable=Dummy.EarlyAlphaSimdraftMultiPhase_support.usernameVar)
        self.UsernameEnt1.configure(takefocus="")
        self.UsernameEnt1.configure(cursor="ibeam")

        self.PasswordEnt1 = ttk.Entry(self.userinfoFrame1)
        self.PasswordEnt1.place(relx=0.51, rely=0.57, relheight=0.25
                                , relwidth=0.42)
        self.PasswordEnt1.configure(textvariable=Dummy.EarlyAlphaSimdraftMultiPhase_support.passwordVar)
        self.PasswordEnt1.configure(takefocus="")
        self.PasswordEnt1.configure(cursor="ibeam")

        self.userLab1 = ttk.Label(self.userinfoFrame1)
        self.userLab1.place(relx=0.03, rely=0.19, height=24, width=125)
        self.userLab1.configure(background="#d9d9d9")
        self.userLab1.configure(foreground="#000000")
        self.userLab1.configure(relief=FLAT)
        self.userLab1.configure(text='''Username''')

        self.passwordLab1 = ttk.Label(self.userinfoFrame1)
        self.passwordLab1.place(relx=0.51, rely=0.19, height=24, width=145)
        self.passwordLab1.configure(background="#d9d9d9")
        self.passwordLab1.configure(foreground="#000000")
        self.passwordLab1.configure(relief=FLAT)
        self.passwordLab1.configure(text='''Password''')

        self.projectselFrame1 = ttk.Labelframe(self.mainBookNB_t1)
        self.projectselFrame1.place(relx=0.01, rely=0.15, relheight=0.41
                                    , relwidth=0.97)
        self.projectselFrame1.configure(text='''Input Project Selector''')
        self.projectselFrame1.configure(width=740)

        self.projectEnt1 = ttk.Entry(self.projectselFrame1)
        self.projectEnt1.place(relx=0.01, rely=0.15, relheight=0.08
                               , relwidth=0.22)
        self.projectEnt1.configure(textvariable=Dummy.EarlyAlphaSimdraftMultiPhase_support.projectInputVar)
        self.projectEnt1.configure(takefocus="")
        self.projectEnt1.configure(cursor="ibeam")

        self.seriesEnt1 = ttk.Entry(self.projectselFrame1)
        self.seriesEnt1.place(relx=0.01, rely=0.33, relheight=0.08
                              , relwidth=0.22)
        self.seriesEnt1.configure(textvariable=Dummy.EarlyAlphaSimdraftMultiPhase_support.seriesInputVar)
        self.seriesEnt1.configure(takefocus="")
        self.seriesEnt1.configure(cursor="ibeam")

        self.projectLab1 = ttk.Label(self.projectselFrame1)
        self.projectLab1.place(relx=0.01, rely=0.06, height=24, width=165)
        self.projectLab1.configure(background="#d9d9d9")
        self.projectLab1.configure(foreground="#000000")
        self.projectLab1.configure(relief=FLAT)
        self.projectLab1.configure(text='''Project''')

        self.seriesLab1 = ttk.Label(self.projectselFrame1)
        self.seriesLab1.place(relx=0.01, rely=0.24, height=24, width=155)
        self.seriesLab1.configure(background="#d9d9d9")
        self.seriesLab1.configure(foreground="#000000")
        self.seriesLab1.configure(relief=FLAT)
        self.seriesLab1.configure(text='''Series''')

        self.urlEnt1 = Entry(self.projectselFrame1)
        self.urlEnt1.place(relx=0.01, rely=0.75, relheight=0.07, relwidth=0.42)
        self.urlEnt1.configure(background="white")
        self.urlEnt1.configure(disabledforeground="#a3a3a3")
        self.urlEnt1.configure(font="TkFixedFont")
        self.urlEnt1.configure(foreground="#000000")
        self.urlEnt1.configure(highlightbackground="#d9d9d9")
        self.urlEnt1.configure(highlightcolor="black")
        self.urlEnt1.configure(insertbackground="black")
        self.urlEnt1.configure(selectbackground="#c4c4c4")
        self.urlEnt1.configure(selectforeground="black")
        self.urlEnt1.configure(textvariable=Dummy.EarlyAlphaSimdraftMultiPhase_support.urlInputVar)

        self.urlLab1 = Label(self.projectselFrame1)
        self.urlLab1.place(relx=0.01, rely=0.63, height=26, width=32)
        self.urlLab1.configure(activebackground="#f9f9f9")
        self.urlLab1.configure(activeforeground="black")
        self.urlLab1.configure(background="#d9d9d9")
        self.urlLab1.configure(disabledforeground="#a3a3a3")
        self.urlLab1.configure(foreground="#000000")
        self.urlLab1.configure(highlightbackground="#d9d9d9")
        self.urlLab1.configure(highlightcolor="black")
        self.urlLab1.configure(text='''URL''')

        self.dataButton1 = ttk.Button(self.projectselFrame1)
        self.dataButton1.place(relx=0.46, rely=0.75, height=30, width=98)
        self.dataButton1.configure(command=lambda: inputHandler())
        self.dataButton1.configure(takefocus="")
        self.dataButton1.configure(text='''Get Data''')

        def inputHandler():
            try:
                Dummy.EarlyAlphaSimdraftMultiPhase_support.getInputDataFromLogin()
                updateTags()
            except ValueError:
                from tkinter import messagebox
                messagebox.showerror("Error", "No data set was loaded, please review your directories and credentials")

        def updateTags():
            self.dataTagBox.delete(0, END)
            if not (('error' in Dummy.EarlyAlphaSimdraftMultiPhase_support.dataSet) or (
                Dummy.EarlyAlphaSimdraftMultiPhase_support.dataSet == {})):
                for key, value in Dummy.EarlyAlphaSimdraftMultiPhase_support.dataSet['series'][0]['tags'].items():
                    self.dataTagBox.insert(END, key + " : " + value)

        self.urlBuildInputButton1 = ttk.Button(self.projectselFrame1)
        self.urlBuildInputButton1.place(relx=0.08, rely=0.63, height=30
                                        , width=98)
        self.urlBuildInputButton1.configure(command=lambda: urlSetEnt())
        self.urlBuildInputButton1.configure(takefocus="")
        self.urlBuildInputButton1.configure(text='''Build URL''')

        def urlSetEnt():
            Dummy.EarlyAlphaSimdraftMultiPhase_support.urlInputVar.set(
                Dummy.EarlyAlphaSimdraftMultiPhase_support.buildURL())
            # self.urlEnt1.insert(Dummy.EarlyAlphaSimdraftMultiPhase_support.urlInputVar.get())

        self.starttimeLab1 = ttk.Label(self.projectselFrame1)
        self.starttimeLab1.place(relx=0.32, rely=0.07, height=24, width=249)
        self.starttimeLab1.configure(background="#d9d9d9")
        self.starttimeLab1.configure(foreground="#000000")
        self.starttimeLab1.configure(relief=FLAT)
        self.starttimeLab1.configure(text='''Starting Time (dd.mm.yyyy hh:mm:ss)''')

        self.starttimeEnt1 = ttk.Entry(self.projectselFrame1)
        self.starttimeEnt1.place(relx=0.32, rely=0.16, relheight=0.08
                                 , relwidth=0.26)
        self.starttimeEnt1.configure(textvariable=Dummy.EarlyAlphaSimdraftMultiPhase_support.startingTimeStdVar)
        self.starttimeEnt1.configure(takefocus="")
        self.starttimeEnt1.configure(cursor="ibeam")
        self.starttimeEnt1.configure(state=DISABLED)

        self.endtimeEnt1 = ttk.Entry(self.projectselFrame1)
        self.endtimeEnt1.place(relx=0.32, rely=0.33, relheight=0.08
                               , relwidth=0.26)
        self.endtimeEnt1.configure(textvariable=Dummy.EarlyAlphaSimdraftMultiPhase_support.endingTimeStdVar)
        self.endtimeEnt1.configure(takefocus="")
        self.endtimeEnt1.configure(cursor="ibeam")
        self.endtimeEnt1.configure(state=DISABLED)

        self.endtimeLab1 = ttk.Label(self.projectselFrame1)
        self.endtimeLab1.place(relx=0.32, rely=0.24, height=24, width=87)
        self.endtimeLab1.configure(background="#d9d9d9")
        self.endtimeLab1.configure(foreground="#000000")
        self.endtimeLab1.configure(relief=FLAT)
        self.endtimeLab1.configure(text='''Ending Time''')

        self.epochstartLab1 = ttk.Label(self.projectselFrame1)
        self.epochstartLab1.place(relx=0.7, rely=0.07, height=24, width=148)
        self.epochstartLab1.configure(background="#d9d9d9")
        self.epochstartLab1.configure(foreground="#000000")
        self.epochstartLab1.configure(relief=FLAT)
        self.epochstartLab1.configure(text='''Starting Time (Epoch)''')

        self.epochstartENT1 = ttk.Entry(self.projectselFrame1)
        self.epochstartENT1.place(relx=0.7, rely=0.16, relheight=0.08
                                  , relwidth=0.26)
        self.epochstartENT1.configure(textvariable=Dummy.EarlyAlphaSimdraftMultiPhase_support.startTimeEpoVar)
        self.epochstartENT1.configure(takefocus="")
        self.epochstartENT1.configure(cursor="ibeam")
        self.epochstartENT1.configure(state=DISABLED)

        self.epochendLab1 = ttk.Label(self.projectselFrame1)
        self.epochendLab1.place(relx=0.7, rely=0.24, height=24, width=91)
        self.epochendLab1.configure(background="#d9d9d9")
        self.epochendLab1.configure(foreground="#000000")
        self.epochendLab1.configure(relief=FLAT)
        self.epochendLab1.configure(text='''Ending Time''')

        self.epoEndTimeENT1 = ttk.Entry(self.projectselFrame1)
        self.epoEndTimeENT1.place(relx=0.7, rely=0.33, relheight=0.08
                                  , relwidth=0.26)
        self.epoEndTimeENT1.configure(textvariable=Dummy.EarlyAlphaSimdraftMultiPhase_support.endingTimeEpoVar)
        self.epoEndTimeENT1.configure(takefocus="")
        self.epoEndTimeENT1.configure(cursor="ibeam")
        self.epoEndTimeENT1.configure(state=DISABLED)

        self.epochButton1 = ttk.Button(self.projectselFrame1)
        self.epochButton1.place(relx=0.7, rely=0.42, height=40, width=108)
        self.epochButton1.configure(command=lambda: activeEpo())
        self.epochButton1.configure(takefocus="")
        self.epochButton1.configure(text='''Use Epoch''')

        def activeEpo():
            self.epoEndTimeENT1.configure(state=NORMAL)
            self.epochstartENT1.configure(state=NORMAL)
            self.starttimeEnt1.configure(state=DISABLED)
            self.endtimeEnt1.configure(state=DISABLED)
            Dummy.EarlyAlphaSimdraftMultiPhase_support.epochTime()

        self.timeButton1 = ttk.Button(self.projectselFrame1)
        self.timeButton1.place(relx=0.32, rely=0.42, height=40, width=108)
        self.timeButton1.configure(command=lambda: activeStandard())
        self.timeButton1.configure(takefocus="")
        self.timeButton1.configure(text='''Use Standard''')

        def activeStandard():
            self.epoEndTimeENT1.configure(state=DISABLED)
            self.epochstartENT1.configure(state=DISABLED)
            self.starttimeEnt1.configure(state=NORMAL)
            self.endtimeEnt1.configure(state=NORMAL)
            Dummy.EarlyAlphaSimdraftMultiPhase_support.standardTime()

        self.projectselOutputFrame2 = ttk.Labelframe(self.mainBookNB_t1)
        self.projectselOutputFrame2.place(relx=0.45, rely=0.57, relheight=0.36
                                          , relwidth=0.46)
        self.projectselOutputFrame2.configure(text='''Output Project Selector''')
        self.projectselOutputFrame2.configure(width=350)

        self.projectEnt2 = ttk.Entry(self.projectselOutputFrame2)
        self.projectEnt2.place(relx=0.06, rely=0.17, relheight=0.09
                               , relwidth=0.47)
        self.projectEnt2.configure(textvariable=Dummy.EarlyAlphaSimdraftMultiPhase_support.projectOutputVar)
        self.projectEnt2.configure(takefocus="")
        self.projectEnt2.configure(cursor="ibeam")

        self.seriesEnt2 = ttk.Entry(self.projectselOutputFrame2)
        self.seriesEnt2.place(relx=0.06, rely=0.37, relheight=0.09
                              , relwidth=0.47)
        self.seriesEnt2.configure(textvariable=Dummy.EarlyAlphaSimdraftMultiPhase_support.seriesOutputVar)
        self.seriesEnt2.configure(takefocus="")
        self.seriesEnt2.configure(cursor="ibeam")

        self.projectLab2 = ttk.Label(self.projectselOutputFrame2)
        self.projectLab2.place(relx=0.06, rely=0.07, height=24, width=165)
        self.projectLab2.configure(background="#d9d9d9")
        self.projectLab2.configure(foreground="#000000")
        self.projectLab2.configure(relief=FLAT)
        self.projectLab2.configure(text='''Project''')

        self.seriesLab2 = ttk.Label(self.projectselOutputFrame2)
        self.seriesLab2.place(relx=0.06, rely=0.27, height=24, width=155)
        self.seriesLab2.configure(background="#d9d9d9")
        self.seriesLab2.configure(foreground="#000000")
        self.seriesLab2.configure(relief=FLAT)
        self.seriesLab2.configure(text='''Optional Rename''')

        self.urlEnt2 = Entry(self.projectselOutputFrame2)
        self.urlEnt2.place(relx=0.06, rely=0.58, relheight=0.08, relwidth=0.9)
        self.urlEnt2.configure(background="white")
        self.urlEnt2.configure(disabledforeground="#a3a3a3")
        self.urlEnt2.configure(font="TkFixedFont")
        self.urlEnt2.configure(foreground="#000000")
        self.urlEnt2.configure(highlightbackground="#d9d9d9")
        self.urlEnt2.configure(highlightcolor="black")
        self.urlEnt2.configure(insertbackground="black")
        self.urlEnt2.configure(selectbackground="#c4c4c4")
        self.urlEnt2.configure(selectforeground="black")
        self.urlEnt2.configure(textvariable=Dummy.EarlyAlphaSimdraftMultiPhase_support.urlOutputVar)

        self.urlLab2 = Label(self.projectselOutputFrame2)
        self.urlLab2.place(relx=0.06, rely=0.47, height=26, width=32)
        self.urlLab2.configure(activebackground="#f9f9f9")
        self.urlLab2.configure(activeforeground="black")
        self.urlLab2.configure(background="#d9d9d9")
        self.urlLab2.configure(disabledforeground="#a3a3a3")
        self.urlLab2.configure(foreground="#000000")
        self.urlLab2.configure(highlightbackground="#d9d9d9")
        self.urlLab2.configure(highlightcolor="black")
        self.urlLab2.configure(text='''URL''')

        self.dataButton2 = ttk.Button(self.projectselOutputFrame2)
        self.dataButton2.place(relx=0.06, rely=0.68, height=30, width=98)
        self.dataButton2.configure(command=Dummy.EarlyAlphaSimdraftMultiPhase_support.pushDataSet)
        self.dataButton2.configure(takefocus="")
        self.dataButton2.configure(text='''Push Data''')

        self.urlBuildOutButtton1 = ttk.Button(self.projectselOutputFrame2)
        self.urlBuildOutButtton1.place(relx=0.63, rely=0.37, height=30, width=98)

        self.urlBuildOutButtton1.configure(command=lambda: setOut())
        self.urlBuildOutButtton1.configure(takefocus="")
        self.urlBuildOutButtton1.configure(text='''Build URL''')

        def setOut():
            Dummy.EarlyAlphaSimdraftMultiPhase_support.urlOutputVar.set(
                Dummy.EarlyAlphaSimdraftMultiPhase_support.buildUrlOut())

        self.Scrolledlistbox1.configure(exportselection=False)
        self.varStorage = []

        def onselect(evt):
            # Note here that Tkinter passes an event object to onselect()
            self.dataVarBox.delete(0, END)

            w = evt.widget
            index = int(w.curselection()[0])
            #self.varStorage = Dummy.EarlyAlphaSimdraftMultiPhase_support.operationSet[index]
            for n in Dummy.EarlyAlphaSimdraftMultiPhase_support.operationSet[index].vars:
                self.dataVarBox.insert(END, n.name + n.value )
                # value = w.get(index)

        self.Scrolledlistbox1.bind('<<ListboxSelect>>', onselect)

        self.dataVarBox = ScrolledListBox(top)
        self.dataVarBox.place(relx=0.41, rely=0.05, relheight=0.56
                , relwidth=0.19)
        self.dataVarBox.configure(background="white")
        self.dataVarBox.configure(disabledforeground="#a3a3a3")
        self.dataVarBox.configure(font="TkFixedFont")
        self.dataVarBox.configure(foreground="black")
        self.dataVarBox.configure(highlightbackground="#d9d9d9")
        self.dataVarBox.configure(highlightcolor="#d9d9d9")
        self.dataVarBox.configure(selectbackground="#c4c4c4")
        self.dataVarBox.configure(selectforeground="black")
        self.dataVarBox.configure(width=10)
        self.dataVarBox.configure(exportselection=False)

        # Custom Var
        self.varFrame = ttk.Frame(top)
        self.varFrame.place(relx=0.41, rely=0.6, relheight=0.08, relwidth=0.19)
        self.varFrame.configure(relief=GROOVE)
        self.varFrame.configure(borderwidth="2")
        self.varFrame.configure(width=355)

        self.varEditEnt = ttk.Entry(self.varFrame)
        self.varEditEnt.place(relx=0.06, rely=0.4, relheight=0.35, relwidth=0.47)

        self.varEditEnt.configure(textvariable=Dummy.EarlyAlphaSimdraftMultiPhase_support.varEditVar)
        self.varEditEnt.configure(takefocus="")
        self.varEditEnt.configure(cursor="ibeam")

        self.varEditButton = ttk.Button(self.varFrame)
        self.varEditButton.place(relx=0.59, rely=0.4, height=30, width=98)
        self.varEditButton.configure(command=lambda: editVar())
        self.varEditButton.configure(takefocus="")
        self.varEditButton.configure(text='''Set Value''')

        def editVar():
            try:
                Dummy.EarlyAlphaSimdraftMultiPhase_support.operationSet[self.Scrolledlistbox1.curselection()[0]].vars[
                    self.dataVarBox.curselection()[0]].value = Dummy.EarlyAlphaSimdraftMultiPhase_support.getEditVar()

                self.dataVarBox.delete(0, END)
                for n in Dummy.EarlyAlphaSimdraftMultiPhase_support.operationSet[self.Scrolledlistbox1.curselection()[0]].vars:
                    self.dataVarBox.insert(END, n.name + n.value)
            except:
                pass


# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        # self.configure(yscrollcommand=_autoscroll(vsb),
        #    xscrollcommand=_autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = Pack.__dict__.keys() | Grid.__dict__.keys() \
                      | Place.__dict__.keys()
        else:
            methods = Pack.__dict__.keys() + Grid.__dict__.keys() \
                      + Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''

        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)

        return wrapped

    def __str__(self):
        return str(self.master)


def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''

    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        return func(cls, container, **kw)

    return wrapped


class ScrolledListBox(AutoScroll, Listbox):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''

    @_create_container
    def __init__(self, master, **kw):
        Listbox.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)


if __name__ == '__main__':
    vp_start_gui()
