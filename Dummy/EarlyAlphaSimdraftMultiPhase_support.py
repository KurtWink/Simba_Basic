#! /usr/bin/env python
#
# Support module generated by PAGE version 4.9
# In conjunction with Tcl version 8.6
#    Jul 14, 2017 09:05:15 AM


import sys
import datetime
from base64 import b64encode
from tkinter import filedialog
from tkinter import messagebox
import json
import requests
import time
import Dummy.genDataList
import importlib
import os

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1

def set_Tk_var():
    global epocCheck
    global dataSet
    dataSet = None
    epocCheck = None
    global operationSet
    global loadVar
    loadVar = IntVar()
    loadVar.set(0)
    global localOutPathVar
    localOutPathVar = StringVar()
    global localInputPathVar
    localInputPathVar = StringVar()
    global usernameVar
    usernameVar = StringVar()
    global passwordVar
    passwordVar = StringVar()
    global projectInputVar
    projectInputVar = StringVar()
    global seriesInputVar
    seriesInputVar = StringVar()
    global urlInputVar
    urlInputVar = StringVar()
    global startingTimeStdVar
    startingTimeStdVar = StringVar()
    global endingTimeStdVar
    endingTimeStdVar = StringVar()
    global startTimeEpoVar
    startTimeEpoVar = StringVar()
    global endingTimeEpoVar
    endingTimeEpoVar = StringVar()
    global projectOutputVar
    projectOutputVar = StringVar()
    global seriesOutputVar
    seriesOutputVar = StringVar()
    global urlOutputVar
    urlOutputVar = StringVar()
    global varEditVar
    varEditVar = StringVar()
    operationSet = Dummy.genDataList.genData()




def getEditVar():
    return varEditVar.get()
def buildURL():
    return "https://in2lytics.gridstate.io/api/" + projectInputVar.get() + "/series/" + seriesInputVar.get() + "/data"

def buildUrlOut():
    return "https://in2lytics.gridstate.io/api/" + projectOutputVar.get() + "/series/"



def doSelectedOps(var):

    for x in var:
        try:
            Dummy.genDataList.genData()[x].functionX(globals())
            globals()['dataSet']['series'][0]['tags'][Dummy.genDataList.genData()[x].name] = "1"
        except ValueError:
            messagebox.showerror("Error",
                                 "There is no data set loaded or an invalid range of values have been selected\nPlease review your dataset options")

def epochTime():
    globals()['epocCheck'] = True

def findLocalFilePath():

    file = filedialog.askopenfile(mode='a')
    localInputPathVar.set(file.name)
    if not ((localInputPathVar.get() is None) or (localInputPathVar.get() == "")):
        return True

def findLocalOutPath():
    file = filedialog.asksaveasfile(mode='a')
    localOutPathVar.set(file.name)
def getJsonSet(auth, url):

    if epocCheck is None:
        raise ValueError()
    if epocCheck:
        startEpoch = globals()['startTimeEpoVar'].get()
        endEpoch = globals()['endingTimeEpoVar'].get()
    else:
        pattern = '%d.%m.%Y %H:%M:%S'
        startEpoch = int(
            time.mktime(time.strptime(globals()['startingTimeStdVar'].get(), pattern))) * 1000
        endEpoch = int(
            time.mktime(time.strptime(globals()['endingTimeStdVar'].get(), pattern))) * 1000

    querystring = {"start_time": ""+str(startEpoch), "end_time": ""+str(endEpoch)}
    print(querystring)
    headers = {'Authorization': 'Basic %s' % auth}

    response = requests.request("GET", url, headers=headers, params=querystring, verify=False)

    return json.loads(response.text)
def getInputDataFromLogin():
    url = urlInputVar.get()
    userAndPass = b64encode(bytes(usernameVar.get() + ':' + passwordVar.get(), "utf-8")).decode("ascii")
    globals()['dataSet'] = getJsonSet(userAndPass, url)
    print(globals()['dataSet'])
    if ('error' in globals()['dataSet']) or (globals()['dataSet'] == {}):
        globals()["dataSet"] = None
        globals()["loadVar"].set(0)
        raise ValueError
    else:
        globals()['loadVar'].set(100)

def getLocalData():
    x_file = open(localInputPathVar.get())

    globals()['dataSet'] = json.loads(x_file.read())
    if ('error' in globals()['dataSet']) or (globals()['dataSet'] == {}):
        globals()["dataSet"] = None
        globals()["loadVar"].set(0)
        raise ValueError
    else:
        globals()['loadVar'].set(100)
    x_file.close()
def pushDataSet():
    url = buildUrlOut()
    auth = b64encode(bytes(usernameVar.get() + ':' + passwordVar.get(), "utf-8")).decode("ascii")
    if not(seriesOutputVar.get() == "" or seriesOutputVar.get() is None):
        dataSet['series'][0]['tags']['file-name'] = seriesOutputVar.get()
    headers = {'Authorization': 'Basic %s' % auth}
    response = requests.request("POST", url, headers=headers, json=globals()['dataSet'], verify=False)
    return response
def saveLocalData():
    file = open(localOutPathVar.get(),'w')
    file.write(json.dumps(dataSet))
    file.close()
def loadModule():
    place = filedialog.askopenfilename(filetypes=("Text File",'*.txt'))
    if place is not None:
        modName = importlib.import_modle((place))
def standardTime():
    globals()['epocCheck'] = False

def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top

def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None

if __name__ == '__main__':
    import EarlyAlphaSimdraftMultiPhase
    EarlyAlphaSimdraftMultiPhase.vp_start_gui()


